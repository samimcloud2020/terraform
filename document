Filename which will keep infrastructure state can be set using the -state and a backup file name – with the-backup.
By default, a backup of your state file is written to terraform.tfstate.backup in case the state file is lost or corrupted to simplify recovery.
The state file is used by Terraform to keep track of resources and metadata information about your infrastructure. By default, the state of your environment is stored locally in your Terraform workspace directory in a file called terraform.tfstate along with a backup file called terraform.tfstate.backup. The state file will not exist until you have completed at least one terraform apply.
Every time you apply Terrafrom it writes a copy of the current state of your infrastructure to a file called terraform.tfstate if this file is already present then it will move the old state file to a file called terraform.tfstate.backup and will create a new terraform.tfstate file.
So, When you run terraform apply then the state will be updated if changes have been made. The previous version will be saved as terraform.tfstate.backup.
root@SDOP_Ts:~/1# cat .terraform.lock.hcl
# This file is maintained automatically by "terraform init".
# Manual edits may be lost in future updates.

provider "registry.terraform.io/hashicorp/aws" {
  version = "4.50.0"
  hashes = [
    "h1:rLtHJP4kPpapX3Nq3u5bWudzO8kHKAkTLFBy6slbh00=",
    "zh:03a5795ea9ed3eb80e0d5e0c5234dc76455aa4437e5546399127939c24a60973",
    "zh:24556a15eb4a69955857b3a52322f099e68031e6f9a3df2cfdb6f6351cc4885e",
    "zh:2c2a18f3da3c06f9da5f2aca485d0b324c8510f2afb70fc1470bcb31485db061",
    "zh:37f194e62f7b433b7235b6e4f6954dd9352554ad044007802d3fa9b80a7a7331",
    "zh:4591157be7c8ec8160186a74789c44f214c7142f400e2c147b710e25abe15be0",
    "zh:53e0f9ca106a9691c20535500cdcf9e4255993536e19ef2fc4c6353bfc7e2e5b",
    "zh:54eb4c288adfafe866b3b1fcc0550ddd025f59843cfa6dd3310fed85c766b950",
    "zh:56e887eba5bb6dd60eb2c72d09eba34232b59a0c83ac1f3693e4064ebd2af02f",
    "zh:57858a160b5dc3c454697798d38e528662c9234f9ab1742f6c5b3bd0414e0578",
    "zh:6ce0a31d9b1bf2dc069414c7aeae0a660aa60b58a59e97a1c575786b120a0104",
    "zh:9b12af85486a96aedd8d7984b0ff811a4b42e3d88dad1a3fb4c0b580d04fa425",
    "zh:b70d22fa41bb30536fb1be5242701b19b0be8bb50ec6ba03bb5396be3cdac8c6",
    "zh:ece8726967858c44a5ae458f7a8438e825128d356fbf1893d41ccb172bb263d9",
    "zh:f0f2a8be772add8d0cdadf77fda7ed1c0dfbbeab9801a0d2d8820148653aa8f4",
    "zh:fc93015058e9592810aa4b3e7834df1717ba8d6aec4679997d16c030c885d6fc",
  ]
}
If you’ve been using Terraform, then you’ve undoubtedly noticed a file named .terraform.lock.hcl get created when you run the terraform init command.
This file is the Terraform Lock File. Let’s dig into what this file is for!
Note: The dependency lock file (.terraform.lock.hcl) is a feature that relates to the use of Terraform 0.14 and later, as tracking dependency selections
was added in version 0.14. Older versions did not track the dependency selections.

There are two dependency types that Terraform must determine version compatibility for:
•	Terraform Providers – These are the plugins that extend Terraform with support for working with external systems, such as the azurerm provider for 
managing Microsoft Azure Resources.
•	Terraform Modules – These are reusable groups of Terraform code that can be consumed by multiple Terraform projects.


Dependency Installation Behavior
When terraform init is working on installing all of the providers needed for a configuration, Terraform considers both the version constraints in the 
configuration and the version selections recorded in the lock file.

If a particular provider has no existing recorded selection, Terraform will select the newest available version that matches the given version constraint, 
and then update the lock file to include that selection.

If a particular provider already has a selection recorded in the lock file, Terraform will always re-select that version for installation, even if a
newer version has become available. You can override that behavior by adding the -upgrade option when you run terraform init, in which case Terraform
will disregard the existing selections and once again select the newest available version matching the version constraint.

If a particular terraform init call makes changes to the lock file, Terraform will mention that as part of its output:

Terraform has made some changes to the provider dependency selections recorded
in the .terraform.lock.hcl file. Review those changes and commit them to your
version control system if they represent changes you intended to make.
Copy
When you see this message, you can use your version control system to review the changes Terraform has proposed in the file, and if they represent 
changes you made intentionally you can send the change through your team's usual code review process.

Checksum verification
Terraform will also verify that each package it installs matches at least one of the checksums it previously recorded in the lock file, if any,
returning an error if none of the checksums match:

Error: Failed to install provider

Error while installing hashicorp/azurerm v2.1.0: the current package for
registry.terraform.io/hashicorp/azurerm 2.1.0 doesn't match any of the
checksums previously recorded in the dependency lock file.
Copy
This checksum verification is intended to represent a trust on first use approach. When you add a new provider for the first time you can verify it 
in whatever way you choose or any way you are required to by relevant regulations, and then trust that Terraform will raise an error if a future run
of terraform init encounters a non-matching package for the same provider version.

There are two special considerations with the "trust on first use" model:

If you install a provider from an origin registry which provides checksums that are signed with a cryptographic signature, Terraform will treat all
of the signed checksums as valid as long as one checksum matches. The lock file will therefore include checksums for both the package you installed 
for your current platform and any other packages that might be available for other platforms.

In this case, the terraform init output will include the fingerprint of the key that signed the checksums, with a message like 
(signed by a HashiCorp partner, key ID DC9FC6B1FCE47986). You may wish to confirm that you trust the holder of the given key before
committing the lock file containing the signed checksums, or to retrieve and verify the full set of available packages for the given provider version.

If you install a provider for the first time using an alternative installation method, such as a filesystem or network mirror, Terraform will not be 
able to verify the checksums for any platform other than the one where you ran terraform init, and so it will not record the checksums for other platforms
and so the configuration will not be usable on any other platform.

To avoid this problem you can pre-populate checksums for a variety of different platforms in your lock file using the terraform providers lock command, 
which will then allow future calls to terraform init to verify that the packages available in your chosen mirror match the official packages from the
provider's origin registry.
